#!/bin/sh
#
# This file is part of the SavaPage project <http://savapage.org>.
# Copyright (c) 2011-2016 Datraverse B.V.
# Author: Rijk Ravestein.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information, please contact Datraverse B.V. at this
# address: info@datraverse.com
#

. `dirname $0`/.server-common.inc.sh
. `dirname $0`/../../../.common.inc.sh
. `dirname $0`/../../../.install-config.sh

if [ -z "${APP_NAME}" ]; then
	echo "Error importing common file." 1>&2
	exit 1
fi

userid=`id | sed "s/^uid=\([0-9][0-9]*\).*$/\1/"`
if test "${userid}" -ne 0
then
	echo "Error: You must be root to run this program" 1>&2
	exit 1
fi

#---------------------------------------------------------------------------
# Constants
#---------------------------------------------------------------------------
readonly SERVER_BIN_HOME=${SCRIPT_HOME}

readonly _SYSTEMD_LIB_SYSTEM_HOME=$(_do_find_lib_systemd_system)

if [ ! -z "${_OS_HAS_SYSTEMD}" ] && [ -z "${_SYSTEMD_LIB_SYSTEM_HOME}" ]; then
    echo "Systemd is installed but lib location is not found." 1>&2
    exit 1
fi

readonly _SYSTEMD_SERVICE_FILENAME=savapage.service
readonly _SYSTEMD_SERVICE_FILEPATH="${_SYSTEMD_LIB_SYSTEM_HOME}/${_SYSTEMD_SERVICE_FILENAME}"

#---------------------------------------------------------------------------
# Write the savapage.service file
#---------------------------------------------------------------------------
do_systemd_write_service_file() {


	cat > "${_SYSTEMD_SERVICE_FILEPATH}" << EOF
#
# This file is part of the SavaPage project <http://savapage.org>.
# Copyright (c) 2011-2016 Datraverse B.V.
# Author: Rijk Ravestein.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information, please contact Datraverse B.V. at this
# address: info@datraverse.com
#
[Unit]
Description=SavaPage Libre Print Management

[Service]
Type=forking
PIDFile=${SERVER_PID}
ExecStart=${SERVER_BIN_HOME}/app-server start
ExecStop=${SERVER_BIN_HOME}/app-server stop

[Install]
WantedBy=multi-user.target

# end-of file
EOF
}

#---------------------------------------------------------------------------
# Install systemd service
#---------------------------------------------------------------------------
do_install_systemd() {
	
    if [ -z "${_OS_HAS_SYSTEMD}" ]; then
        echo "Error: systemd is not installed."  >&2
    	exit 1
    fi
    
    # stop the savapage service
    if [ -e "${SERVER_PID}" ]; then
		systemctl stop ${_SYSTEMD_SERVICE_FILENAME}
	fi

    if [ -e "${_SYSTEMD_SERVICE_FILEPATH}" ]; then
		systemctl disable ${_SYSTEMD_SERVICE_FILENAME}		
    fi

    #    
    do_systemd_write_service_file
    
	# Since savapage.service changed on disk, reload systemd units.	
	systemctl daemon-reload
        
    # enable the savapage service
	systemctl enable ${_SYSTEMD_SERVICE_FILENAME}		
}

#---------------------------------------------------------------------------
# Uninstall systemd service
#---------------------------------------------------------------------------
do_uninstall_systemd() {
	
    if [ -z "${_OS_HAS_SYSTEMD}" ]; then
        echo "Error: systemd is not installed."  >&2
    	exit 1
    fi

    # Disable the savapage service, this removes the symbolic link 
	# in /etc/systemd/system/
	systemctl disable ${_SYSTEMD_SERVICE_FILENAME}

	# remove service file
	rm -f "${_SYSTEMD_SERVICE_FILEPATH}"
	
	systemctl reset-failed	
}

#---------------------------------------------------------------------------
# Install our SysV init scripts
#---------------------------------------------------------------------------
do_install_sysvinit() {

    if [ -z "${_OS_HAS_SYSVINIT}" ]; then
        echo "Error: SysV init is not installed."  >&2
    	exit 1
    fi

	#
	# Install the scripts when not already installed.
    #
    installScripts=
    if [ ! -e "/etc/init.d/${APP_NAME_SHORT}" ]; then
        echo "Installing SysV style boot scripts..."
        installScripts=1
    fi

    #
    # Make sure we always overwrite our symlink just in case the user switches
    # architecture.
    #
    cd /etc/init.d
    ln -sf "${SERVER_BIN_HOME}/app-server" "${APP_NAME_SHORT}"

	#
    if [ -z "${installScripts}" ]; then
    	return
    fi

    #
    # Activate init scripts at runlevels in /etc/rc*.d location if found
    #
    if [ -d "/etc/rc5.d" ]; then
    
        if [ ! -z "${_OS_IS_DEBIAN_BASED}" ]; then
            update-rc.d "${APP_NAME_SHORT}" defaults
        else
            # The part below does NOT work in Debian like systems.
            # When booted the service does NOT start, even when...
            # /etc/init.d/savapage start  (works OK)
            # /etc/rc2.d/savapage start   (works OK)
        
            # Start in runlevel 3
            if [ -d "/etc/rc3.d" ]; then
                cd /etc/rc3.d
                ln -s "../init.d/${APP_NAME_SHORT}" "S99${APP_NAME_SHORT}"
            fi

            # Start in runlevel 5
            if [ -d "/etc/rc5.d" ]; then
                cd /etc/rc5.d
                ln -s "../init.d/${APP_NAME_SHORT}" "S99${APP_NAME_SHORT}"
            fi

            # Start in runlevel 2
            if [ -d "/etc/rc2.d" ]; then
                cd /etc/rc2.d
                ln -s "../init.d/${APP_NAME_SHORT}" "S99${APP_NAME_SHORT}"
            fi

            # Kill in runlevel 0
            if [ -d "/etc/rc0.d" ]; then
                cd /etc/rc0.d
                ln -s "../init.d/${APP_NAME_SHORT}" "K89${APP_NAME_SHORT}"
            fi

            # Kill in runlevel 1
            if [ -d "/etc/rc1.d" ]; then
                cd /etc/rc1.d
                ln -s "../init.d/${APP_NAME_SHORT}" "K89${APP_NAME_SHORT}"
            fi

            # Kill in runlevel 6
            if [ -d "/etc/rc6.d" ]; then
                cd /etc/rc6.d
                ln -s "../init.d/${APP_NAME_SHORT}" "K89${APP_NAME_SHORT}"
            fi
        fi
    fi

    #
    # SuSE's rc*.d dir's are located under /etc/init.d. Activate here
    # if found.
    #
    if [ -d "/etc/init.d/rc5.d" ]; then
        # Start in runlevel 3
        if [ -d "/etc/init.d/rc3.d" ]; then
            cd /etc/init.d/rc3.d
            ln -s "../${APP_NAME_SHORT}" "S99${APP_NAME_SHORT}"
        fi

        # Start in runlevel 5
        if [ -d "/etc/init.d/rc5.d" ]; then
            cd /etc/init.d/rc5.d
            ln -s "../${APP_NAME_SHORT}" "S99${APP_NAME_SHORT}"
        fi

        # Start in runlevel 2
        if [ -d "/etc/init.d/rc2.d" ]; then
            cd /etc/init.d/rc2.d
            ln -s "../${APP_NAME_SHORT}" "S99${APP_NAME_SHORT}"
        fi

        # Kill in runlevel 0
        if [ -d "/etc/init.d/rc0.d" ]; then
            cd /etc/init.d/rc0.d
            ln -s "../${APP_NAME_SHORT}" "K89${APP_NAME_SHORT}"
        fi

        # Kill in runlevel 1
        if [ -d "/etc/init.d/rc1.d" ]; then
            cd /etc/init.d/rc1.d
            ln -s "../${APP_NAME_SHORT}" "K89${APP_NAME_SHORT}"
        fi

        # Kill in runlevel 6
        if [ -d "/etc/init.d/rc6.d" ]; then
            cd /etc/init.d/rc6.d
            ln -s "../${APP_NAME_SHORT}" "K89${APP_NAME_SHORT}"
        fi
    fi    

	cd "${SCRIPT_HOME}"
}

#---------------------------------------------------------------------------
# Uninstall our SysV init scripts
#---------------------------------------------------------------------------
do_uninstall_sysvinit() {

    if [ -z "${_OS_HAS_SYSVINIT}" ]; then
        echo "Error: SysV init is not installed."  >&2
    	exit 1
    fi

    if [ ! -e "/etc/init.d/${APP_NAME_SHORT}" ]; then
    	return
    fi

	echo "Removing SysV style boot scripts..."
                
    # Remove init/rc scripts from all possible locations

    if [ ! -z "${_OS_IS_DEBIAN_BASED}" ]; then
        update-rc.d -f "${APP_NAME_SHORT}" remove
        rm -f /etc/init.d/"${APP_NAME_SHORT}"
    else
        rm -f /etc/init.d/${APP_NAME_SHORT} > /dev/null 2>&1
        rm -f /etc/rc*.d/*${APP_NAME_SHORT} > /dev/null 2>&1
        rm -f /etc/init.d/rc*.d/*${APP_NAME_SHORT} > /dev/null 2>&1
    fi	    
}

#---------------------------------------------------------------------------
# Root-level tasks for App Server install
#---------------------------------------------------------------------------
do_install() {
    #
    # Set permissions on binaries as required
    #
    echo "Setting savapage-pam as setuid root..."

    chown root:root ${SERVER_BIN_HOME}/savapage-pam
    chmod 4511 ${SERVER_BIN_HOME}/savapage-pam

    echo "Configuring PAM..."
    if [ -n "${PAM_SERVERNAME}" -a -f /etc/pam.d/passwd ]; then
        # 
        # PAM seems to be quite distribution specific so we'll
        # take the approach of using passwd as a template. This
        # should contain the basic stuff we need for password
        # authentication.
        #
        cp /etc/pam.d/passwd "/etc/pam.d/${PAM_SERVERNAME}" 2>/dev/null
    fi

    #
    # Link in the SysV rc style start scripts or systemd service?
    #
    if [ ! -z "${_OS_HAS_SYSTEMD}" ]; then
    	
	    if [ ! -z "${_OS_HAS_SYSVINIT}" ]; then
    		do_uninstall_sysvinit
	    fi
    	    	
    	do_install_systemd
    	
    else
    	do_install_sysvinit
    fi
                                                   
	echo "Start the server..."
    service savapage start >/dev/null 2>&1 

	# Wait 20 seconds for app server to startup.
	for i in 0 1 2 3 4 5 6 7 8 9; do
		sleep 2
		if [ ! -f "${SP_INSTALL_DIR}/server/logs/server.started.txt" ]; then
			echo_n "."
		else
			break
		fi
	done
	echo "...started."

	#
	# Install complete
	#
	servername=`hostname`
	if [ -z "${servername}" ]; then
			servername="<server_name>"
	fi
	
	echo 
	echo "Installation completed."
	echo 
	echo "Open https://${servername}:${SAVAPAGE_PORT_SSL}/admin to configure the application."
	echo 
	echo "Please consult the User Manual for more information."
	echo 
}

#---------------------------------------------------------------------------
# Root-level tasks for App Server un-install
#---------------------------------------------------------------------------
do_uninstall() {

    if [ -e "${SERVER_PID}" ]; then
        echo "Stopping the server..."
        service savapage stop >/dev/null 2>&1 
    fi
		
    if [ ! -z "${_OS_HAS_SYSVINIT}" ]; then
		do_uninstall_sysvinit
    fi
    if [ ! -z "${_OS_HAS_SYSTEMD}" ]; then
		do_uninstall_systemd
	fi
}

############################################################################
# Main
############################################################################

case "${1}" in
    uninstall)
        do_uninstall
        ;;
    install)
        do_install
        ;;
    *)
        # Assume install
        do_install
        ;;
esac

# end-of-script

#!/bin/sh
#
# This file is part of the SavaPage project <https://www.savapage.org>.
# Copyright (c) 2011-2022 Datraverse B.V.
# Author: Rijk Ravestein.
#
# SPDX-FileCopyrightText: 2011-2022 Datraverse B.V. <info@datraverse.com>
# SPDX-License-Identifier: AGPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# For more information, please contact Datraverse B.V. at this
# address: info@datraverse.com
#

cd `dirname $0`

# Verify that /dev/null is writable.
if [ ! -w /dev/null ] ; then
	echo "Error: /dev/null is not writable. Ensure /dev/null is writable by all users." >&2
	exit 1
fi

. ./.install-config.sh

usage="_____________________________________________________________________________
SavaPage Install (c) 2010-2022, Datraverse B.V.

License: GNU AGPL version 3 or later <https://www.gnu.org/licenses/agpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Usage: "`basename "$0"`" [OPTION]...
        -d <dir>  The target location, usually the /opt/savapage directory.
        -h        This help text.
        -n        Non-interactive install: execute MUST-RUN-AS-ROOT afterwards."

#----------------------------------------------------------------
# Parse CLI arguments
#----------------------------------------------------------------
SP_INSTALL_DIR=
SP_INSTALL_SILENTLY=off

while test $# -gt 0
do
    case "$1" in
        -h)
            echo "${usage}"
            exit 0;
            ;;
            
        -d)
            SP_INSTALL_DIR="$2"
            shift
            ;;

        -n)
            SP_INSTALL_SILENTLY="on"
            ;;

        --)
            shift
            break
            ;;

        -*)
            echo "${usage}" 1>&2
            exit 1
            ;;

        *)
            break
            ;;
    esac
    shift
done

#----------------------------------------------------------------
# Check CLI parameters
#----------------------------------------------------------------
if [ -z "${SP_INSTALL_DIR}" ]; then
	echo "${usage}" >&2
	exit 1
fi

if [ ! -d "${SP_INSTALL_DIR}" ]; then
	echo "Error: target directory \"${SP_INSTALL_DIR}\" does not exist."  >&2
	exit 1
fi


#
# Check if system account is provided
#
SP_SYS_ACCOUNT=${UNIX_USERNAME}
if [ -z "${SP_SYS_ACCOUNT}" ]; then
	echo "Error: system account is unknown." >&2
	exit 1
fi

#
# Common functions
#
if [ -n"X`echo -n`" = "X-n" ]; then
    echo_n() { echo ${1+"$@"}"\c"; }
else
    echo_n() { echo -n ${1+"$@"}; }
fi

#
# Check that we're running as the expected system account.
#
userid=`id | grep "${SP_SYS_ACCOUNT}"`
if [ -z "${userid}" ]; then
    echo
    echo "Error: Please run this installer as system user \"${SP_SYS_ACCOUNT}\"." >&2
    echo "If this user does not exist, please create the system account." >&2
    echo "See the installation instructions in the manual for details." >&2
    echo >&2
    echo "Install aborted!" >&2
    exit 1
fi


echo "
  ____                   ____
 / ___|  __ ___   ____ _|  _ \\ __ _  __ _  ___
 \\___ \\ / _\` \\ \\ / / _\` | |_) / _\` |/ _\` |/ _ \\
  ___) | (_| |\\ V / (_| |  __/ (_| | (_| |  __/
 |____/ \\__,_| \\_/ \\__,_|_|   \\__,_|\\__, |\\___|
                                    |___/
"

# Request agreement with AGPL
echo "+------------------------------------------------------------------+"
echo "| SavaPage is copyright (c) 2011-"`date +%Y`" Datraverse B.V. and licensed |"
echo "| under the terms of the GNU Affero General Public License (AGPL)  |"
echo "| version 3, or (at your option) any later version..               |"
echo "|                                                                  |" 
echo "| See <https://www.gnu.org/licenses/>                              |"
echo "|                                                                  |" 
echo "| A LICENSE copy of the AGPL is supplied along with this program.  |"
echo "+------------------------------------------------------------------+"

agreed=

if test "${SP_INSTALL_SILENTLY}" = "on"
then
    agreed=1
fi

while [ -z "${agreed}" ]; do
    echo "Do you agree with the AGPL license terms? [yes or no] "
    read reply leftover
    case $reply in
        [yY] | [yY][eE][sS])
            agreed=1
            ;;
        [nN] | [nN][oO])
            echo "AGPL not accepted. Install aborted!"
            exit 1
            ;;
    esac
done

#
# Check if system account has access to install directory
#
echo "\nInstalling in ${SP_INSTALL_DIR}"

# Use stat -L to get information about the target of a symlink, and not the link itself.
_STAT_OWNER=`stat -L -c %U ${SP_INSTALL_DIR}`
if [ ${_STAT_OWNER} != ${SP_SYS_ACCOUNT} ]; then
	echo "Error: \"${SP_INSTALL_DIR}\" must be owned by user \"${SP_SYS_ACCOUNT}\" (currently owned by \"${_STAT_OWNER}\")." >&2
	exit 1
fi

# do NOT check group  (yet)
#_STAT_GROUP=`stat -L -c %G ${SP_INSTALL_DIR}`
#if [ ${_STAT_GROUP} != ${SP_SYS_ACCOUNT} ]; then
	#	echo "Error: \"${SP_INSTALL_DIR}\" must be owned by group \"${SP_SYS_ACCOUNT}\" (currently owned by \"${_STAT_GROUP}\")." >&2
	#exit 1
#fi

# Add a '0' for octal bitwise AND operation 
# (a number preceded by a 0 is octal (base 8)
_STAT_PERM=0`stat -L -c %a ${SP_INSTALL_DIR}`

if [ $(( $_STAT_PERM & 0002 )) != "0" ]; then
	echo "Error: world write access to \"${SP_INSTALL_DIR}\"." >&2
	exit 1
fi

# do NOT check group rights (yet)
#if [ $(( $_STAT_PERM & 0020 )) = "0" ]; then
	#	echo "Error: group \"${SP_SYS_ACCOUNT}\" does not have write access to \"${SP_INSTALL_DIR}\"." >&2
	#exit 1        
#fi

if [ $(( $_STAT_PERM & 0200 )) = "0" ]; then
	echo "Error: user \"${SP_SYS_ACCOUNT}\" does not have write access to \"${SP_INSTALL_DIR}\"." >&2
	exit 1
fi

#
# Check dependencies
#

# Check for perl

hasperl=`which perl 2> /dev/null`
if [ -z "${hasperl}" ]; then
	echo "Error: Unable to install. Please install Perl." >&2
	exit 1
fi

#
# The server/bin/linux-* directory denotes the install architecture
#
if [ -x server/bin/linux-x64 ]; then
    install_arch=x64
else
    install_arch=i686
fi

wrong_arch=
system_arch=`uname -m 2>/dev/null`

# Note: aarch64 is 64-bit extension of the ARM architecture family.
if [ "${system_arch}" = "x86_64" ] || [ "${system_arch}" = "aarch64" ]; then
    if [ "${install_arch}" = "i686" ]; then
        wrong_arch=y
        required_arch=x64
    fi
else
    if [ "${install_arch}" = "x64" ]; then
        wrong_arch=y
        required_arch=i686
    fi
fi

if [ "${wrong_arch}" = "y" ]; then
    echo
    echo "WARNING: SavaPage runs on ${install_arch} systems. This system is identified as ${system_arch}."
    agreed=
    while [ -z "${agreed}" ]; do
        echo
        echo "Do you wish to proceed? [yes or no] "
        read reply leftover
        case $reply in
            [yY] | [yY][eE][sS])
                agreed=1
                ;;
            [nN] | [nN][oO])
                echo "Install aborted!"
                exit 1
                ;;
        esac
    done
fi

echo "Checking dependencies ..."
sleep 2s

# Java JRE
hasjre=`which java 2> /dev/null`
if [ -z "${hasjre}" ]; then
    echo
    echo "ERROR: SavaPage needs Java JRE but this package is not installed."
    echo "Please install Java JRE first. Consult the User Manual for details."
    echo
    exit 1
else
	echo "Java JRE ... ok"
fi

# Java JDK (Jasper Reports needs javac)
hasjdk=`which javac 2> /dev/null`
if [ -z "${hasjdk}" ]; then
    echo
    echo "ERROR: SavaPage needs Java JDK but this package is not installed."
    echo "Please install Java JDK first. Consult the User Manual for details."
    echo
    exit 1
else
	echo "Java JDK ... ok"
fi

#
# Check for CUPS
#
hascups=`which lpr 2> /dev/null`
if [ -z "${hascups}" ]; then
    echo
    echo "ERROR: SavaPage needs CUPS but 'lpr' command is not found."
    echo "Please install CUPS first. Consult the User Manual for details."
    echo
    exit 1
else
	echo "CUPS ... ok"
fi

#
# Check for `strings`command from binutils package
#
hasstrings=`which strings 2> /dev/null`
if [ -z "${hasstrings}" ]; then
    echo
    echo "ERROR: The installer needs binutils but this package is not installed."
    echo "Please install binutils first. Consult the User Manual for details."
    echo
    exit 1
else
	echo "binutils ... ok"
fi

#
# Check for ImageMagick
#
hasconvert=`which convert 2> /dev/null`

if [ -z "${hasconvert}" ]; then

    echo

    if test "${SP_INSTALL_SILENTLY}" = "on"
    then
        echo -n "ERROR: "
    else
        echo -n "WARNING: "
    fi

    echo "SavaPage needs ImageMagick to function properly, but this"
    echo "package is not installed. Please see the User Manual for details."
    
    if test "${SP_INSTALL_SILENTLY}" = "on"
    then
		exit 1
    fi
    
	agreed=
	while [ -z "${agreed}" ]; do
		echo
		echo "Do you wish to proceed and install ImageMagick afterwards? [yes or no] "
		read reply leftover
		case $reply in
			[yY] | [yY][eE][sS])
				agreed=1
				;;
			[nN] | [nN][oO])
				echo "Install aborted!"
				exit 1
				;;
		esac
	done
else
	# convert -version | grep -i ImageMagick
	echo "ImageMagick ... ok"
fi

#
# Check for poppler-utils (pdftoppm) 
#
haspoppler=`which pdftoppm 2> /dev/null`
if [ -z "${haspoppler}" ]; then
    echo
    
    if test "${SP_INSTALL_SILENTLY}" = "on"
    then
        echo -n "ERROR: "
    else
        echo -n "WARNING: "
    fi
    
    echo "SavaPage needs poppler-utils to function properly, but this"
    echo "package is not installed. Please see the User Manual for details."
    
    if test "${SP_INSTALL_SILENTLY}" = "on"
    then
		exit 1
    fi    
    
	agreed=
	while [ -z "${agreed}" ]; do
		echo
		echo "Do you wish to proceed and install poppler-utils afterwards? [yes or no] "
		read reply leftover
		case $reply in
			[yY] | [yY][eE][sS])
				agreed=1
				;;
			[nN] | [nN][oO])
				echo "Install aborted!"
				exit 1
				;;
		esac
	done
else
	echo "poppler-utils ... ok"
fi

#
# Check if savapage utilities can be run
#
echo "Checking utilities ..."
binerror=
	
bin_home=server/bin/linux-${install_arch}	
prv_home=providers/cups/linux-${install_arch}
			
binaries="${prv_home}/savapage-notifier
    	${bin_home}/savapage-nss
        ${bin_home}/savapage-pam"

for d in ${binaries}; do
    	
	lddok=`ldd ${d} 2> /dev/null`
	
	if [ -z "${lddok}" ]; then
		echo "${d} ... ERROR" >&2
		binerror=y 
	else
		echo `basename ${d}`" ... ok" 
	fi
done
    
if [ "${binerror}" = "y" ]; then    	    	
	echo "ERROR: Unable to install. One or more SavaPage utilities cannot run." >&2
	echo "Please contact the SavaPage Helpdesk." >&2
   	exit 1
fi

# Check for AppArmour (reserved)

# Check for SELinux (reserved)

installovertop=
#
# Stop the server if already running.  Just in case someone is
# upgrading an i686 to x64 we need to test and stop both here.
#
if [ -f "${SP_INSTALL_DIR}/server/bin/linux-i686/app-server" ]; then
	echo "Stopping existing installed server..."
	${SP_INSTALL_DIR}/server/bin/linux-i686/app-server stop >/dev/null 2>&1 
	echo 
	installovertop=1
fi
if [ -f "${SP_INSTALL_DIR}/server/bin/linux-x64/app-server" ]; then
	echo "Stopping existing installed server..."
	${SP_INSTALL_DIR}/server/bin/linux-x64/app-server stop >/dev/null 2>&1
	echo 
	installovertop=1
fi

#
# Remove existing OBSOLETE files from previous installation.
#
rm "${SP_INSTALL_DIR}/LICENSE.TXT" >/dev/null 2>&1 
rm "${SP_INSTALL_DIR}/THIRDPARTYLICENSEREADME.TXT" >/dev/null 2>&1 
rm "${SP_INSTALL_DIR}/README-LINUX.TXT" >/dev/null 2>&1 

#
# Remove any existing server/lib files, except log4j.properties file
#
if [ -d "${SP_INSTALL_DIR}/server/lib" ]; then
	echo "Removing the server's old library files..."
	find "${SP_INSTALL_DIR}/server/lib/" | grep -v "log4j.properties$" | xargs rm >/dev/null 2>&1
fi

#
# Remove any existing server/bin files
#
if [ -d "${SP_INSTALL_DIR}/server/bin/linux-${install_arch}" ]; then
	echo "Removing the server's old bin files..."
	rm -fr "${SP_INSTALL_DIR}/server/bin/linux-${install_arch}/" >/dev/null 2>&1 
fi

#
# Clear/recreate server/tmp
#
rm -fr "${SP_INSTALL_DIR}/server/tmp/" >/dev/null 2>&1 
mkdir "${SP_INSTALL_DIR}/server/tmp"

#
# Remove any existing documentation files
#
if [ -d "${SP_INSTALL_DIR}/server/data/docs" ]; then
	echo "Removing the server's old documentation files..."
	rm -fr "${SP_INSTALL_DIR}/server/data/docs/" >/dev/null 2>&1 
fi

#
# Remove any existing client/win files
#
if [ -d "${SP_INSTALL_DIR}/client/win" ]; then
	echo "Removing the client's old win files..."
	rm -fr "${SP_INSTALL_DIR}/client/win/" >/dev/null 2>&1 
fi

#
# Remove any existing client/linux files
#
if [ -d "${SP_INSTALL_DIR}/client/linux" ]; then
	echo "Removing the client's old linux files..."
	rm -fr "${SP_INSTALL_DIR}/client/linux/" >/dev/null 2>&1 
fi

#
# Remove any existing client/app/lib files
#
if [ -d "${SP_INSTALL_DIR}/client/app/lib" ]; then
	echo "Removing the client app's old library files..."
	rm -fr "${SP_INSTALL_DIR}/client/app/lib/" >/dev/null 2>&1 
fi

#
# Remove any existing client/app/config files, except client.properties file
#
if [ -d "${SP_INSTALL_DIR}/client/app/config" ]; then
	echo "Removing the client app's old config files..."
	find "${SP_INSTALL_DIR}/client/app/config/" | grep -v "client.properties$" | xargs rm >/dev/null 2>&1	
fi

#
# Remove any existing providers/cups files
#
if [ -d "${SP_INSTALL_DIR}/providers/cups/linux-${install_arch}" ]; then
	echo "Removing the CUPS provider's old files..."
	rm -fr "${SP_INSTALL_DIR}/providers/cups/linux-${install_arch}/" >/dev/null 2>&1 
fi

#
# Remove any existing providers/nfc files
#
if [ -d "${SP_INSTALL_DIR}/providers/nfc" ]; then
	echo "Removing the NFC provider's old files..."
	rm -fr "${SP_INSTALL_DIR}/providers/nfc/" >/dev/null 2>&1 
fi

#
# Remove old Java runtime (from pre-0.9.8 installation)
#
rm -rf "${SP_INSTALL_DIR}/runtime" >/dev/null 2>&1

#
# Remove old savapage-ext-*.jar files 
#
rm -rf "${SP_INSTALL_DIR}"/server/ext/lib/savapage-ext-*.jar >/dev/null 2>&1

# ----------------------------------------------------------
# Copy all files excluding user defined or data files
# ----------------------------------------------------------
echo "Installing into ${SP_INSTALL_DIR}..."
(
	find . -print  \
		| grep -v "admin.properties" \
		| grep -v "server.properties" \
		| grep -v "jmxremote.properties" \
		| grep -v "jmxremote.access" \
		| grep -v "jmxremote.password" \
		| grep -v "server/data/internal" \
		| grep -v "^./install$" \
) | cpio -pmud "${SP_INSTALL_DIR}"

#
# Copy in excluded files if they don't already exist
#

if [ ! -f "${SP_INSTALL_DIR}/server/admin.properties" ]; then
	cp server/admin.properties "${SP_INSTALL_DIR}/server/admin.properties"
fi

if [ ! -f "${SP_INSTALL_DIR}/server/server.properties" ]; then
	cp server/server.properties "${SP_INSTALL_DIR}/server/server.properties"
fi

if [ ! -f "${SP_INSTALL_DIR}/server/jmxremote.properties" ]; then
	cp server/jmxremote.properties "${SP_INSTALL_DIR}/server/jmxremote.properties"
fi

if [ ! -f "${SP_INSTALL_DIR}/server/jmxremote.access" ]; then
	cp server/jmxremote.access "${SP_INSTALL_DIR}/server/jmxremote.access"
fi

if [ ! -f "${SP_INSTALL_DIR}/server/jmxremote.password" ]; then
	# Create a random password to begin with...
	echo "admin="`date | md5sum` > "${SP_INSTALL_DIR}/server/jmxremote.password"
fi

if [ ! -d "${SP_INSTALL_DIR}/server/data/internal" ]; then
	find server/data/internal -print | cpio -pmud "${SP_INSTALL_DIR}"
fi

#
# Create files from templates if they don't exist
#
if [ ! -f "${SP_INSTALL_DIR}/client/app/config/client.properties" ]; then
	cp client/app/config/client.properties.template "${SP_INSTALL_DIR}/client/app/config/client.properties"
fi

if [ ! -f "${SP_INSTALL_DIR}/server/lib/log4j.properties" ]; then
	cp server/lib/log4j.properties.template "${SP_INSTALL_DIR}/server/lib/log4j.properties"
fi

# 
# Create an JMX keystore?
#
echo "Configuring JMX encryption..."
if [ ! -f ${SP_INSTALL_DIR}/server/jmxremote.ks ]; then
	${SP_INSTALL_DIR}/server/bin/linux-${install_arch}/create-jmx-keystores
else
	echo "JMX encryption already present."
fi

# 
# Create an SSL keystore and pw
#
echo "Configuring SSL encryption..."
${SP_INSTALL_DIR}/server/bin/linux-${install_arch}/create-ssl-keystore --default
chmod 600 ${SP_INSTALL_DIR}/server/data/default-ssl-keystore 2>/dev/null
chmod 600 ${SP_INSTALL_DIR}/server/data/default-ssl-keystore.pw 2>/dev/null

#
# Set permissions
#
echo "Applying default permissions..."

#
# Ensure our install directory is world readable only
#
chmod 755 "${SP_INSTALL_DIR}" 2>/dev/null

chmod 755 "${SP_INSTALL_DIR}/server/bin/linux-${install_arch}/setperms"
${SP_INSTALL_DIR}/server/bin/linux-${install_arch}/setperms

if [ -e "${SP_INSTALL_DIR}/providers/cups/linux-i686/setperms" ]; then
    chmod 755 "${SP_INSTALL_DIR}/providers/cups/linux-i686/setperms"
    ${SP_INSTALL_DIR}/providers/cups/linux-i686/setperms
fi

if [ -e "${SP_INSTALL_DIR}/providers/cups/linux-x64/setperms" ]; then
    chmod 755 "${SP_INSTALL_DIR}/providers/cups/linux-x64/setperms"
    ${SP_INSTALL_DIR}/providers/cups/linux-x64/setperms
fi

chmod 755 "${SP_INSTALL_DIR}/uninstall"

#
# Ensure the client/app scripts are world executable
#
chmod +x "${SP_INSTALL_DIR}/client/app/savapage-client" 2>/dev/null
chmod +x "${SP_INSTALL_DIR}/client/app/savapage-client.bat" 2>/dev/null

#
# Ensure the providers/nfc directory is world readable only
#
chmod 755 -R "${SP_INSTALL_DIR}/providers/nfc" 2>/dev/null

#----------------------------------------------------------------------
# Last but not least: do root tasks
#----------------------------------------------------------------------
echo 
echo "The install needs to perform some tasks as root.  Tasks include:"
echo "	* Setting setuid-root on the authentication provider"
echo "	* Installing the CUPS notifier"
echo "	* Configure the server's boot scripts"

agreed=
answered=
manual=

if test "${SP_INSTALL_SILENTLY}" = "on"
then
    answered=1
    manual=1
fi

while [ -z "${answered}" ]; do
	echo
	echo "Would you like to perform these tasks now?  [yes or no] "
	read reply leftover
	case $reply in
		[yY] | [yY][eE][sS])
			agreed=1
			answered=1
			;;
		[nN] | [nN][oO])
			answered=1
            manual=1
			echo
			echo "Skipping root level tasks!"
			;;
	esac
done

if [ ! -z "${agreed}" ]; then
	continue=
	while [ -z "${continue}" ]; do
        use_sudo=
        if which sudo >/dev/null 2>&1; then
            echo
            echo "Run the root tasks using:"
            echo "  [1] su    - requires the root password (default)"
            echo "  [2] sudo  - if user ${SP_SYS_ACCOUNT} has sudo access"
            echo "Enter 1 or 2: "
            read reply leftover
            case $reply in
                [2] | [sS][uU][dD][oO])
                    use_sudo=1
                    ;;
            esac
        fi
        sudo_cmd=
        if [ ! -z "${use_sudo}" ]; then
            sudo_cmd=sudo
            echo "Enter your sudo password if requested/required:"
        else
            echo "Enter the root password when requested:"
        fi
        
		${sudo_cmd} su -c "${SP_INSTALL_DIR}/providers/cups/linux-${install_arch}/roottasks; 
                            ${SP_INSTALL_DIR}/server/bin/linux-${install_arch}/roottasks
                            "
						
		if [ $? -ne 0 ]; then
			echo
			echo "Root tasks failed!  Was the password correct?"
			answered=
			while [ -z "${answered}" ]; do
				echo "Would you like to try again? [yes or no] "
				read reply leftover
				case $reply in
					[yY] | [yY][eE][sS])
						answered=1
						;;
					[nN] | [nN][oO])
						answered=1
                        manual=1
						continue=1
						echo "Skipping root tasks!"
						;;
				esac
			done
		else
			continue=1 						
		fi
	done
fi

if [ ! -z "${manual}" ]; then
    #
    # Write a script containing our root tasks
    #
    cat > "${SP_INSTALL_DIR}/MUST-RUN-AS-ROOT" << EOF
#!/bin/sh
${SP_INSTALL_DIR}/providers/cups/linux-${install_arch}/roottasks
${SP_INSTALL_DIR}/server/bin/linux-${install_arch}/roottasks
EOF
    chmod 755 "${SP_INSTALL_DIR}/MUST-RUN-AS-ROOT"
    
	echo 
    echo "Root tasks must be applied with the script:"
    echo "  ${SP_INSTALL_DIR}/MUST-RUN-AS-ROOT"
	echo 
	echo "Please run this script as root to complete the installation."
	echo

fi

# end-of -file
